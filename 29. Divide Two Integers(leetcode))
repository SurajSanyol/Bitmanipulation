class Solution {
public:
    int divide(int dividend, int divisor) {
        
        if(dividend==divisor) return 1;

         if (dividend == INT_MIN && divisor == -1) {
            return INT_MAX; // To avoid overflow
        }

          if (dividend == INT_MIN && divisor == 1) {
            return INT_MIN; // To avoid overflow
        }


        int resultSign = (dividend<0)^(divisor<0) ? -1 : 1;

        long long n = abs(static_cast<long long>(dividend));
        long long d = abs(static_cast<long long>(divisor));

        long long result = 0;

         while(n>=d){

             int cnt = 0;
             while(n>=(d<<(cnt+1)))
             {
                cnt+=1;
             }

             result +=1<<cnt;
             
             n-= d<<cnt;
         }
         
         result*= resultSign;

        if (result > INT_MAX) return INT_MAX;
        if (result < INT_MIN) return INT_MIN;

         return result;

       
    }
};
